# Docker Compose for TikTok Shop Agentic RAG System
# Includes PostgreSQL with pgvector and Neo4j for knowledge graph

version: '3.8'

services:
  # PostgreSQL with pgvector for vector storage
  postgres:
    image: pgvector/pgvector:pg16
    container_name: tiktok_postgres
    environment:
      POSTGRES_DB: tiktok_agentic_rag
      POSTGRES_USER: tiktok_user
      POSTGRES_PASSWORD: tiktok_password
      POSTGRES_HOST_AUTH_METHOD: trust
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./sql/tiktok_agentic_rag_schema.sql:/docker-entrypoint-initdb.d/01-schema.sql
    networks:
      - tiktok_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U tiktok_user -d tiktok_agentic_rag"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Neo4j for knowledge graph
  neo4j:
    image: neo4j:5.15-community
    container_name: tiktok_neo4j
    environment:
      NEO4J_AUTH: neo4j/tiktok_neo4j_password
      NEO4J_PLUGINS: '["apoc", "graph-data-science"]'
      NEO4J_dbms_security_procedures_unrestricted: apoc.*,gds.*
      NEO4J_dbms_security_procedures_allowlist: apoc.*,gds.*
      NEO4J_dbms_memory_heap_initial__size: 512m
      NEO4J_dbms_memory_heap_max__size: 2G
      NEO4J_dbms_memory_pagecache_size: 1G
    ports:
      - "7474:7474"  # HTTP
      - "7687:7687"  # Bolt
    volumes:
      - neo4j_data:/data
      - neo4j_logs:/logs
      - neo4j_import:/var/lib/neo4j/import
      - neo4j_plugins:/plugins
    networks:
      - tiktok_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "cypher-shell", "-u", "neo4j", "-p", "tiktok_neo4j_password", "RETURN 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis for caching (optional but recommended)
  redis:
    image: redis:7-alpine
    container_name: tiktok_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - tiktok_network
    restart: unless-stopped
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # TikTok Agentic RAG API (optional - for containerized deployment)
  tiktok_api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: tiktok_api
    environment:
      - DATABASE_URL=postgresql://tiktok_user:tiktok_password@postgres:5432/tiktok_agentic_rag
      - NEO4J_URI=bolt://neo4j:7687
      - NEO4J_USER=neo4j
      - NEO4J_PASSWORD=tiktok_neo4j_password
      - REDIS_URL=redis://redis:6379/0
      - GEMINI_API_KEY=${GEMINI_API_KEY}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - FIREBASE_PROJECT_ID=${FIREBASE_PROJECT_ID}
      - FIREBASE_PRIVATE_KEY=${FIREBASE_PRIVATE_KEY}
      - FIREBASE_CLIENT_EMAIL=${FIREBASE_CLIENT_EMAIL}
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      neo4j:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - tiktok_network
    restart: unless-stopped
    volumes:
      - ./logs:/app/logs
    profiles:
      - full-stack  # Only start with --profile full-stack

  # Grafana for monitoring (optional)
  grafana:
    image: grafana/grafana:latest
    container_name: tiktok_grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    ports:
      - "3001:3000"
    volumes:
      - grafana_data:/var/lib/grafana
    networks:
      - tiktok_network
    restart: unless-stopped
    profiles:
      - monitoring

  # Prometheus for metrics (optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: tiktok_prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - tiktok_network
    restart: unless-stopped
    profiles:
      - monitoring

volumes:
  postgres_data:
    driver: local
  neo4j_data:
    driver: local
  neo4j_logs:
    driver: local
  neo4j_import:
    driver: local
  neo4j_plugins:
    driver: local
  redis_data:
    driver: local
  grafana_data:
    driver: local
  prometheus_data:
    driver: local

networks:
  tiktok_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
